// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zBeatmapStatusSearch = z.enum([
    'Pending',
    'Ranked',
    'Approved',
    'Qualified',
    'Loved',
    'Any',
    'Graveyard',
    'Wip'
]);

export const zGameMode = z.enum([
    'Standard',
    'Taiko',
    'CatchTheBeat',
    'Mania',
    'RelaxStandard',
    'RelaxTaiko',
    'RelaxCatchTheBeat',
    'AutopilotStandard',
    'ScoreV2Standard',
    'ScoreV2Taiko',
    'ScoreV2CatchTheBeat',
    'ScoreV2Mania'
]);

export const zUserBadge = z.enum([
    'Developer',
    'Admin',
    'Bat',
    'Bot',
    'Supporter'
]);

export const zUserResponse = z.object({
    user_id: z.number().int(),
    username: z.string(),
    description: z.union([
        z.string(),
        z.null()
    ]).optional(),
    country_code: z.string(),
    register_date: z.string().datetime(),
    avatar_url: z.string(),
    banner_url: z.string(),
    last_online_time: z.string().datetime(),
    restricted: z.boolean(),
    silenced_until: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    default_gamemode: zGameMode,
    badges: z.array(zUserBadge),
    user_status: z.string()
});

export const zBeatmapResponse = z.object({
    id: z.number().int(),
    beatmapset_id: z.number().int(),
    hash: z.string(),
    version: z.string(),
    status: zBeatmapStatusSearch,
    star_rating_osu: z.number(),
    star_rating_taiko: z.number(),
    star_rating_ctb: z.number(),
    star_rating_mania: z.number(),
    total_length: z.number().int(),
    max_combo: z.number().int(),
    accuracy: z.union([
        z.number(),
        z.null()
    ]).optional(),
    ar: z.union([
        z.number(),
        z.null()
    ]).optional(),
    bpm: z.number(),
    convert: z.boolean(),
    count_circles: z.number().int(),
    count_sliders: z.number().int(),
    count_spinners: z.number().int(),
    cs: z.number(),
    deleted_at: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    drain: z.union([
        z.number(),
        z.null()
    ]).optional(),
    hit_length: z.number().int(),
    is_scoreable: z.boolean(),
    is_ranked: z.boolean(),
    last_updated: z.string().datetime(),
    mode_int: z.number().int(),
    mode: zGameMode,
    ranked: z.number().int(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    artist: z.union([
        z.string(),
        z.null()
    ]).optional(),
    creator: z.union([
        z.string(),
        z.null()
    ]).optional(),
    creator_id: z.number().int(),
    beatmap_nominator_user: zUserResponse.optional(),
    can_be_hyped: z.boolean()
});

export const zBeatmapSetHypeCountResponse = z.object({
    current_hypes: z.number().int(),
    required_hypes: z.number().int()
});

export const zBeatmapSetResponse = z.object({
    id: z.number().int(),
    artist: z.string(),
    title: z.string(),
    creator: z.string(),
    creator_id: z.number().int(),
    status: zBeatmapStatusSearch,
    last_updated: z.string().datetime(),
    submitted_date: z.string().datetime(),
    ranked_date: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    video: z.boolean(),
    beatmaps: z.array(zBeatmapResponse),
    description: z.string(),
    genre: z.string(),
    language: z.string(),
    tags: z.array(z.string()),
    beatmap_nominator_user: zUserResponse.optional(),
    can_be_hyped: z.boolean()
});

export const zBeatmapSetsResponse = z.object({
    sets: z.array(zBeatmapSetResponse),
    total_count: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zUserMedalResponse = z.object({
    id: z.number().int().readonly(),
    name: z.string().readonly(),
    description: z.string().readonly(),
    unlocked_at: z.union([
        z.string().datetime().readonly(),
        z.null()
    ]).readonly().optional()
});

export const zCategory = z.object({
    medals: z.array(zUserMedalResponse).readonly()
});

export const zChangePasswordRequest = z.object({
    current_password: z.string(),
    new_password: z.string()
});

export const zDifficultyAttributes = z.object({
    aim: z.union([
        z.number(),
        z.null()
    ]).optional(),
    aimDifficultStrainCount: z.union([
        z.number(),
        z.null()
    ]).optional(),
    ar: z.union([
        z.number(),
        z.null()
    ]).optional(),
    color: z.union([
        z.number(),
        z.null()
    ]).optional(),
    flashlight: z.union([
        z.number(),
        z.null()
    ]).optional(),
    greatHitWindow: z.union([
        z.number(),
        z.null()
    ]).optional(),
    hp: z.union([
        z.number(),
        z.null()
    ]).optional(),
    isConvert: z.boolean(),
    maxCombo: z.number().int(),
    mode: zGameMode,
    monoStaminaFactor: z.union([
        z.number(),
        z.null()
    ]).optional(),
    nCircles: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    nDroplets: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    nFruits: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    nHoldNotes: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    nLargeTicks: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    nObjects: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    nSliders: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    nSpinners: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    nTinyDroplets: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    od: z.union([
        z.number(),
        z.null()
    ]).optional(),
    okHitWindow: z.union([
        z.number(),
        z.null()
    ]).optional(),
    peak: z.union([
        z.number(),
        z.null()
    ]).optional(),
    rhythm: z.union([
        z.number(),
        z.null()
    ]).optional(),
    sliderFactor: z.union([
        z.number(),
        z.null()
    ]).optional(),
    speed: z.union([
        z.number(),
        z.null()
    ]).optional(),
    speedDifficultStrainCount: z.union([
        z.number(),
        z.null()
    ]).optional(),
    speedNoteCount: z.union([
        z.number(),
        z.null()
    ]).optional(),
    stamina: z.union([
        z.number(),
        z.null()
    ]).optional(),
    stars: z.number()
});

export const zEditBeatmapsetFavouriteStatusRequest = z.object({
    favourited: z.boolean()
});

export const zEditDefaultGameModeRequest = z.object({
    default_gamemode: zGameMode
});

export const zEditDescriptionRequest = z.object({
    description: z.string()
});

export const zUpdateFriendshipStatusAction = z.enum([
    'Add',
    'Remove'
]);

export const zEditFriendshipStatusRequest = z.object({
    action: zUpdateFriendshipStatusAction
});

export const zUserPlaystyle = z.enum([
    'None',
    'Mouse',
    'Keyboard',
    'Tablet',
    'TouchScreen'
]);

export const zEditUserMetadataRequest = z.object({
    playstyle: z.union([
        z.array(zUserPlaystyle),
        z.null()
    ]).optional(),
    location: z.union([
        z.string().max(32),
        z.null()
    ]).optional(),
    interest: z.union([
        z.string().max(32),
        z.null()
    ]).optional(),
    occupation: z.union([
        z.string().max(32),
        z.null()
    ]).optional(),
    telegram: z.union([
        z.string().max(32),
        z.null()
    ]).optional(),
    twitch: z.union([
        z.string().max(32),
        z.null()
    ]).optional(),
    twitter: z.union([
        z.string().max(32),
        z.null()
    ]).optional(),
    discord: z.union([
        z.string().max(32),
        z.null()
    ]).optional(),
    website: z.union([
        z.string().max(200),
        z.null()
    ]).optional()
});

export const zErrorResponse = z.object({
    error: z.string()
});

export const zFavouritedResponse = z.object({
    favourited: z.boolean()
});

export const zFollowersResponse = z.object({
    followers: z.array(zUserResponse),
    total_count: z.number().int()
});

export const zFriendStatusResponse = z.object({
    is_following_you: z.boolean(),
    is_followed_by_you: z.boolean()
});

export const zFriendsResponse = z.object({
    friends: z.array(zUserResponse),
    total_count: z.number().int()
});

export const zGradesResponse = z.object({
    count_xh: z.number().int(),
    count_x: z.number().int(),
    count_sh: z.number().int(),
    count_s: z.number().int(),
    count_a: z.number().int(),
    count_b: z.number().int(),
    count_c: z.number().int(),
    count_d: z.number().int()
});

export const zHypedBeatmapSetResponse = z.object({
    id: z.number().int(),
    artist: z.string(),
    title: z.string(),
    creator: z.string(),
    creator_id: z.number().int(),
    status: zBeatmapStatusSearch,
    last_updated: z.string().datetime(),
    submitted_date: z.string().datetime(),
    ranked_date: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    video: z.boolean(),
    beatmaps: z.array(zBeatmapResponse),
    description: z.string(),
    genre: z.string(),
    language: z.string(),
    tags: z.array(z.string()),
    beatmap_nominator_user: zUserResponse.optional(),
    can_be_hyped: z.boolean(),
    hypeCount: z.number().int()
});

export const zHypedBeatmapSetsResponse = z.object({
    sets: z.array(zHypedBeatmapSetResponse),
    total_count: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zItemType = z.enum([
    'Hype'
]);

export const zInventoryItemResponse = z.object({
    quantity: z.number().int(),
    item_type: zItemType
});

export const zUserStatsResponse = z.object({
    user_id: z.number().int(),
    gamemode: zGameMode,
    accuracy: z.number(),
    total_score: z.coerce.bigint(),
    ranked_score: z.coerce.bigint(),
    play_count: z.number().int(),
    pp: z.number(),
    rank: z.coerce.bigint(),
    country_rank: z.coerce.bigint(),
    max_combo: z.number().int(),
    play_time: z.number().int(),
    total_hits: z.number().int(),
    best_global_rank: z.coerce.bigint(),
    best_global_rank_date: z.string().datetime(),
    best_country_rank: z.coerce.bigint(),
    best_country_rank_date: z.string().datetime()
});

export const zUserWithStats = z.object({
    user: zUserResponse,
    stats: zUserStatsResponse
});

export const zLeaderboardResponse = z.object({
    users: z.array(zUserWithStats),
    total_count: z.number().int()
});

export const zLeaderboardSortType = z.enum([
    'Pp',
    'Score'
]);

export const zRateLimits = z.object({
    total_limit: z.number().int(),
    remaining_calls: z.coerce.bigint()
});

export const zLimitsResponse = z.object({
    message: z.string(),
    rate_limits: zRateLimits,
    beatmap_rate_limits: zRateLimits
});

export const zMedalsResponse = z.object({
    hush_hush: zCategory,
    beatmap_hunt: zCategory,
    mod_introduction: zCategory,
    skill: zCategory
});

export const zMods = z.enum([
    'None',
    'NoFail',
    'Easy',
    'TouchDevice',
    'Hidden',
    'HardRock',
    'SuddenDeath',
    'DoubleTime',
    'Relax',
    'HalfTime',
    'Nightcore',
    'Flashlight',
    'Autoplay',
    'SpunOut',
    'Relax2',
    'Perfect',
    'Key4',
    'Key5',
    'Key6',
    'Key7',
    'Key8',
    'FadeIn',
    'Random',
    'Cinema',
    'Target',
    'Key9',
    'KeyCoop',
    'Key1',
    'Key3',
    'Key2',
    'ScoreV2'
]);

export const zMostPlayedBeatmapResponse = z.object({
    id: z.number().int(),
    beatmapset_id: z.number().int(),
    hash: z.string(),
    version: z.string(),
    status: zBeatmapStatusSearch,
    star_rating_osu: z.number(),
    star_rating_taiko: z.number(),
    star_rating_ctb: z.number(),
    star_rating_mania: z.number(),
    total_length: z.number().int(),
    max_combo: z.number().int(),
    accuracy: z.union([
        z.number(),
        z.null()
    ]).optional(),
    ar: z.union([
        z.number(),
        z.null()
    ]).optional(),
    bpm: z.number(),
    convert: z.boolean(),
    count_circles: z.number().int(),
    count_sliders: z.number().int(),
    count_spinners: z.number().int(),
    cs: z.number(),
    deleted_at: z.union([
        z.string().datetime(),
        z.null()
    ]).optional(),
    drain: z.union([
        z.number(),
        z.null()
    ]).optional(),
    hit_length: z.number().int(),
    is_scoreable: z.boolean(),
    is_ranked: z.boolean(),
    last_updated: z.string().datetime(),
    mode_int: z.number().int(),
    mode: zGameMode,
    ranked: z.number().int(),
    title: z.union([
        z.string(),
        z.null()
    ]).optional(),
    artist: z.union([
        z.string(),
        z.null()
    ]).optional(),
    creator: z.union([
        z.string(),
        z.null()
    ]).optional(),
    creator_id: z.number().int(),
    beatmap_nominator_user: zUserResponse.optional(),
    can_be_hyped: z.boolean(),
    play_count: z.number().int()
});

export const zMostPlayedResponse = z.object({
    most_played: z.array(zMostPlayedBeatmapResponse),
    total_count: z.number().int()
});

export const zScoreState = z.object({
    maxCombo: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    osuLargeTickHits: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    osuSmallTickHits: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    sliderEndHits: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    nGeki: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    nKatu: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    n300: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    n100: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    n50: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    misses: z.union([
        z.number().int(),
        z.null()
    ]).optional()
});

export const zPerformanceAttributes = z.object({
    difficulty: zDifficultyAttributes,
    effectiveMissCount: z.union([
        z.number(),
        z.null()
    ]).optional(),
    estimatedUnstableRate: z.union([
        z.number(),
        z.null()
    ]).optional(),
    pp: z.number(),
    ppAccuracy: z.union([
        z.number(),
        z.null()
    ]).optional(),
    ppAim: z.union([
        z.number(),
        z.null()
    ]).optional(),
    ppDifficulty: z.union([
        z.number(),
        z.null()
    ]).optional(),
    ppFlashlight: z.union([
        z.number(),
        z.null()
    ]).optional(),
    ppSpeed: z.union([
        z.number(),
        z.null()
    ]).optional(),
    state: zScoreState
});

export const zRefreshTokenRequest = z.object({
    refresh_token: z.string()
});

export const zRefreshTokenResponse = z.object({
    token: z.string(),
    expires_in: z.number().int()
});

export const zRegisterRequest = z.object({
    username: z.string(),
    password: z.string(),
    email: z.string()
});

export const zScoreResponse = z.object({
    accuracy: z.number(),
    beatmap_id: z.number().int(),
    count_100: z.number().int(),
    count_300: z.number().int(),
    count_50: z.number().int(),
    count_geki: z.number().int(),
    count_katu: z.number().int(),
    count_miss: z.number().int(),
    game_mode: zGameMode,
    game_mode_extended: zGameMode,
    grade: z.string(),
    id: z.number().int(),
    is_passed: z.boolean(),
    has_replay: z.boolean(),
    leaderboard_rank: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    max_combo: z.number().int(),
    mods: z.union([
        z.string(),
        z.null()
    ]).optional(),
    mods_int: z.union([
        z.number().int(),
        z.null()
    ]).optional(),
    is_perfect: z.boolean(),
    performance_points: z.number(),
    total_score: z.coerce.bigint(),
    user_id: z.number().int(),
    when_played: z.string().datetime(),
    user: zUserResponse
});

export const zScoreTableType = z.enum([
    'Best',
    'Recent',
    'Top'
]);

export const zScoresResponse = z.object({
    scores: z.array(zScoreResponse),
    total_count: z.number().int()
});

export const zStatsSnapshotResponse = z.object({
    country_rank: z.coerce.bigint(),
    pp: z.number(),
    global_rank: z.coerce.bigint(),
    saved_at: z.string().datetime()
});

export const zStatsSnapshotsResponse = z.object({
    total_count: z.number().int(),
    snapshots: z.array(zStatsSnapshotResponse)
});

export const zStatusResponse = z.object({
    is_online: z.boolean(),
    is_on_maintenance: z.boolean(),
    users_online: z.number().int(),
    current_users_online: z.union([
        z.array(zUserResponse),
        z.null()
    ]).optional(),
    total_users: z.coerce.bigint(),
    recent_users: z.union([
        z.array(zUserResponse),
        z.null()
    ]).optional(),
    total_scores: z.union([
        z.coerce.bigint(),
        z.null()
    ]).optional(),
    total_restrictions: z.union([
        z.coerce.bigint(),
        z.null()
    ]).optional()
});

export const zTokenRequest = z.object({
    username: z.string(),
    password: z.string()
});

export const zTokenResponse = z.object({
    token: z.string(),
    refresh_token: z.string(),
    expires_in: z.number().int()
});

export const zUserMetadataResponse = z.object({
    playstyle: z.array(zUserPlaystyle),
    location: z.string(),
    interest: z.string(),
    occupation: z.string(),
    telegram: z.string(),
    twitch: z.string(),
    twitter: z.string(),
    discord: z.string(),
    website: z.string()
});

export const zUserRelationsCountersResponse = z.object({
    followers: z.number().int(),
    following: z.number().int()
});

export const zUserWithStatsResponse = z.object({
    user: zUserResponse,
    stats: zUserStatsResponse.optional()
});

export const zUsernameChangeRequest = z.object({
    new_username: z.string()
});

export const zPostAuthTokenResponse = zTokenResponse;

export const zPostAuthRefreshResponse = zRefreshTokenResponse;

export const zPostAuthRegisterResponse = zTokenResponse;

export const zGetPingResponse = z.string();

export const zGetLimitsResponse = zLimitsResponse;

export const zGetStatusResponse = zStatusResponse;

export const zGetBeatmapByIdResponse = zBeatmapResponse;

export const zGetBeatmapsetByBeatmapSetByIdResponse = zBeatmapResponse;

export const zGetBeatmapByIdPpResponse = zPerformanceAttributes;

export const zGetBeatmapsetByBeatmapSetByIdPpResponse = zPerformanceAttributes;

export const zGetBeatmapByIdLeaderboardResponse = zScoresResponse;

export const zGetBeatmapsetByBeatmapSetByIdLeaderboardResponse = zScoresResponse;

export const zGetBeatmapsetByIdResponse = zBeatmapSetResponse;

export const zGetBeatmapsetByIdHypeResponse = zBeatmapSetHypeCountResponse;

export const zGetBeatmapsetGetHypedSetsResponse = zHypedBeatmapSetsResponse;

export const zGetBeatmapsetByIdFavouritedResponse = zFavouritedResponse;

export const zPostBeatmapsetByIdFavouritedResponse = zBeatmapSetResponse;

export const zGetBeatmapsetSearchResponse = zBeatmapSetsResponse;

export const zGetScoreByIdResponse = zScoreResponse;

export const zGetScoreByIdReplayResponse = z.string();

export const zGetScoreTopResponse = zScoresResponse;

export const zGetUserByIdResponse = zUserResponse;

export const zGetUserByIdByModeResponse = zUserWithStatsResponse;

export const zGetUserSelfResponse = zUserResponse;

export const zGetUserSelfByModeResponse = zUserWithStatsResponse;

export const zGetUserByUserIdGraphResponse = zStatsSnapshotsResponse;

export const zGetUserByIdScoresResponse = zScoresResponse;

export const zGetUserByIdMostplayedResponse = zMostPlayedResponse;

export const zGetUserByIdFavouritesResponse = zBeatmapSetsResponse;

export const zGetUserLeaderboardResponse = zLeaderboardResponse;

export const zGetUserSearchResponse = z.array(zUserResponse);

export const zGetUserFriendsResponse = zFriendsResponse;

export const zGetUserFollowersResponse = zFollowersResponse;

export const zGetUserByIdFriendStatusResponse = zFriendStatusResponse;

export const zGetUserInventoryItemResponse = zInventoryItemResponse;

export const zGetUserByIdFriendsCountResponse = zUserRelationsCountersResponse;

export const zGetUserByIdMedalsResponse = zMedalsResponse;

export const zGetUserByIdGradesResponse = zGradesResponse;

export const zGetUserByIdMetadataResponse = zUserMetadataResponse;