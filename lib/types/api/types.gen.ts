// This file is auto-generated by @hey-api/openapi-ts

export type BeatmapResponse = {
    id: number;
    beatmapset_id: number;
    hash: string;
    version: string;
    status: BeatmapStatusWeb;
    star_rating_osu: number;
    star_rating_taiko: number;
    star_rating_ctb: number;
    star_rating_mania: number;
    total_length: number;
    max_combo: number;
    accuracy?: number | null;
    ar?: number | null;
    bpm: number;
    convert: boolean;
    count_circles: number;
    count_sliders: number;
    count_spinners: number;
    cs: number;
    deleted_at?: string | null;
    drain?: number | null;
    hit_length: number;
    is_scoreable: boolean;
    is_ranked: boolean;
    last_updated: string;
    mode_int: number;
    mode: GameMode;
    ranked: number;
    title?: string | null;
    artist?: string | null;
    creator?: string | null;
    creator_id: number;
    beatmap_nominator_user?: UserResponse;
    can_be_hyped: boolean;
};

export type BeatmapSetHypeCountResponse = {
    current_hypes: number;
    required_hypes: number;
};

export type BeatmapSetResponse = {
    id: number;
    artist: string;
    title: string;
    creator: string;
    creator_id: number;
    status: BeatmapStatusWeb;
    last_updated: string;
    submitted_date: string;
    ranked_date?: string | null;
    video: boolean;
    beatmaps: Array<BeatmapResponse>;
    description: string;
    genre: string;
    language: string;
    tags: Array<string>;
    beatmap_nominator_user?: UserResponse;
    can_be_hyped: boolean;
};

export type BeatmapSetsResponse = {
    sets: Array<BeatmapSetResponse>;
    total_count?: number | null;
};

export enum BeatmapStatusWeb {
    PENDING = 'Pending',
    RANKED = 'Ranked',
    APPROVED = 'Approved',
    QUALIFIED = 'Qualified',
    LOVED = 'Loved',
    UNKNOWN = 'Unknown',
    GRAVEYARD = 'Graveyard',
    WIP = 'Wip'
}

export type Category = {
    readonly medals: Array<UserMedalResponse>;
};

export type ChangePasswordRequest = {
    current_password: string;
    new_password: string;
};

export type DifficultyAttributes = {
    aim?: number | null;
    aimDifficultStrainCount?: number | null;
    ar?: number | null;
    color?: number | null;
    flashlight?: number | null;
    greatHitWindow?: number | null;
    hp?: number | null;
    isConvert: boolean;
    maxCombo: number;
    mode: GameMode;
    monoStaminaFactor?: number | null;
    nCircles?: number | null;
    nDroplets?: number | null;
    nFruits?: number | null;
    nHoldNotes?: number | null;
    nLargeTicks?: number | null;
    nObjects?: number | null;
    nSliders?: number | null;
    nSpinners?: number | null;
    nTinyDroplets?: number | null;
    od?: number | null;
    okHitWindow?: number | null;
    peak?: number | null;
    rhythm?: number | null;
    sliderFactor?: number | null;
    speed?: number | null;
    speedDifficultStrainCount?: number | null;
    speedNoteCount?: number | null;
    stamina?: number | null;
    stars: number;
};

export type EditBeatmapsetFavouriteStatusRequest = {
    favourited: boolean;
};

export type EditDefaultGameModeRequest = {
    default_gamemode: GameMode;
};

export type EditDescriptionRequest = {
    description: string;
};

export type EditFriendshipStatusRequest = {
    action: UpdateFriendshipStatusAction;
};

export type EditUserMetadataRequest = {
    playstyle?: Array<UserPlaystyle> | null;
    location?: string | null;
    interest?: string | null;
    occupation?: string | null;
    telegram?: string | null;
    twitch?: string | null;
    twitter?: string | null;
    discord?: string | null;
    website?: string | null;
};

export type ErrorResponse = {
    error: string;
};

export type FavouritedResponse = {
    favourited: boolean;
};

export type FollowersResponse = {
    followers: Array<UserResponse>;
    total_count: number;
};

export type FriendStatusResponse = {
    is_following_you: boolean;
    is_followed_by_you: boolean;
};

export type FriendsResponse = {
    friends: Array<UserResponse>;
    total_count: number;
};

export enum GameMode {
    STANDARD = 'Standard',
    TAIKO = 'Taiko',
    CATCH_THE_BEAT = 'CatchTheBeat',
    MANIA = 'Mania',
    RELAX_STANDARD = 'RelaxStandard',
    RELAX_TAIKO = 'RelaxTaiko',
    RELAX_CATCH_THE_BEAT = 'RelaxCatchTheBeat',
    AUTOPILOT_STANDARD = 'AutopilotStandard',
    SCORE_V2_STANDARD = 'ScoreV2Standard',
    SCORE_V2_TAIKO = 'ScoreV2Taiko',
    SCORE_V2_CATCH_THE_BEAT = 'ScoreV2CatchTheBeat',
    SCORE_V2_MANIA = 'ScoreV2Mania'
}

export type GradesResponse = {
    count_xh: number;
    count_x: number;
    count_sh: number;
    count_s: number;
    count_a: number;
    count_b: number;
    count_c: number;
    count_d: number;
};

export type HypedBeatmapSetResponse = {
    id: number;
    artist: string;
    title: string;
    creator: string;
    creator_id: number;
    status: BeatmapStatusWeb;
    last_updated: string;
    submitted_date: string;
    ranked_date?: string | null;
    video: boolean;
    beatmaps: Array<BeatmapResponse>;
    description: string;
    genre: string;
    language: string;
    tags: Array<string>;
    beatmap_nominator_user?: UserResponse;
    can_be_hyped: boolean;
    hypeCount: number;
};

export type HypedBeatmapSetsResponse = {
    sets: Array<HypedBeatmapSetResponse>;
    total_count?: number | null;
};

export type InventoryItemResponse = {
    quantity: number;
    item_type: ItemType;
};

export enum ItemType {
    HYPE = 'Hype'
}

export type LeaderboardResponse = {
    users: Array<UserWithStats>;
    total_count: number;
};

export enum LeaderboardSortType {
    PP = 'Pp',
    SCORE = 'Score'
}

export type LimitsResponse = {
    message: string;
    rate_limits: RateLimits;
    beatmap_rate_limits: RateLimits;
};

export type MedalsResponse = {
    hush_hush: Category;
    beatmap_hunt: Category;
    mod_introduction: Category;
    skill: Category;
};

export enum Mods {
    NONE = 'None',
    NO_FAIL = 'NoFail',
    EASY = 'Easy',
    TOUCH_DEVICE = 'TouchDevice',
    HIDDEN = 'Hidden',
    HARD_ROCK = 'HardRock',
    SUDDEN_DEATH = 'SuddenDeath',
    DOUBLE_TIME = 'DoubleTime',
    RELAX = 'Relax',
    HALF_TIME = 'HalfTime',
    NIGHTCORE = 'Nightcore',
    FLASHLIGHT = 'Flashlight',
    AUTOPLAY = 'Autoplay',
    SPUN_OUT = 'SpunOut',
    RELAX2 = 'Relax2',
    PERFECT = 'Perfect',
    KEY4 = 'Key4',
    KEY5 = 'Key5',
    KEY6 = 'Key6',
    KEY7 = 'Key7',
    KEY8 = 'Key8',
    FADE_IN = 'FadeIn',
    RANDOM = 'Random',
    CINEMA = 'Cinema',
    TARGET = 'Target',
    KEY9 = 'Key9',
    KEY_COOP = 'KeyCoop',
    KEY1 = 'Key1',
    KEY3 = 'Key3',
    KEY2 = 'Key2',
    SCORE_V2 = 'ScoreV2'
}

export type MostPlayedBeatmapResponse = {
    id: number;
    beatmapset_id: number;
    hash: string;
    version: string;
    status: BeatmapStatusWeb;
    star_rating_osu: number;
    star_rating_taiko: number;
    star_rating_ctb: number;
    star_rating_mania: number;
    total_length: number;
    max_combo: number;
    accuracy?: number | null;
    ar?: number | null;
    bpm: number;
    convert: boolean;
    count_circles: number;
    count_sliders: number;
    count_spinners: number;
    cs: number;
    deleted_at?: string | null;
    drain?: number | null;
    hit_length: number;
    is_scoreable: boolean;
    is_ranked: boolean;
    last_updated: string;
    mode_int: number;
    mode: GameMode;
    ranked: number;
    title?: string | null;
    artist?: string | null;
    creator?: string | null;
    creator_id: number;
    beatmap_nominator_user?: UserResponse;
    can_be_hyped: boolean;
    play_count: number;
};

export type MostPlayedResponse = {
    most_played: Array<MostPlayedBeatmapResponse>;
    total_count: number;
};

export type PerformanceAttributes = {
    difficulty: DifficultyAttributes;
    effectiveMissCount?: number | null;
    estimatedUnstableRate?: number | null;
    pp: number;
    ppAccuracy?: number | null;
    ppAim?: number | null;
    ppDifficulty?: number | null;
    ppFlashlight?: number | null;
    ppSpeed?: number | null;
    state: ScoreState;
};

export type RateLimits = {
    total_limit: number;
    remaining_calls: number;
};

export type RefreshTokenRequest = {
    refresh_token: string;
};

export type RefreshTokenResponse = {
    token: string;
    expires_in: number;
};

export type RegisterRequest = {
    username: string;
    password: string;
    email: string;
};

export type ScoreResponse = {
    accuracy: number;
    beatmap_id: number;
    count_100: number;
    count_300: number;
    count_50: number;
    count_geki: number;
    count_katu: number;
    count_miss: number;
    game_mode: GameMode;
    game_mode_extended: GameMode;
    grade: string;
    id: number;
    is_passed: boolean;
    has_replay: boolean;
    leaderboard_rank?: number | null;
    max_combo: number;
    mods?: string | null;
    mods_int?: number | null;
    is_perfect: boolean;
    performance_points: number;
    total_score: number;
    user_id: number;
    when_played: string;
    user: UserResponse;
};

export type ScoreState = {
    maxCombo?: number | null;
    osuLargeTickHits?: number | null;
    osuSmallTickHits?: number | null;
    sliderEndHits?: number | null;
    nGeki?: number | null;
    nKatu?: number | null;
    n300?: number | null;
    n100?: number | null;
    n50?: number | null;
    misses?: number | null;
};

export enum ScoreTableType {
    BEST = 'Best',
    RECENT = 'Recent',
    TOP = 'Top'
}

export type ScoresResponse = {
    scores: Array<ScoreResponse>;
    total_count: number;
};

export type StatsSnapshotResponse = {
    country_rank: number;
    pp: number;
    global_rank: number;
    saved_at: string;
};

export type StatsSnapshotsResponse = {
    total_count: number;
    snapshots: Array<StatsSnapshotResponse>;
};

export type StatusResponse = {
    is_online: boolean;
    is_on_maintenance: boolean;
    users_online: number;
    current_users_online?: Array<UserResponse> | null;
    total_users: number;
    recent_users?: Array<UserResponse> | null;
    total_scores?: number | null;
    total_restrictions?: number | null;
};

export type TokenRequest = {
    username: string;
    password: string;
};

export type TokenResponse = {
    token: string;
    refresh_token: string;
    expires_in: number;
};

export type UpdateBeatmapsCustomStatusRequest = {
    ids: Array<number>;
    status: BeatmapStatusWeb;
};

export enum UpdateFriendshipStatusAction {
    ADD = 'Add',
    REMOVE = 'Remove'
}

export enum UserBadge {
    DEVELOPER = 'Developer',
    ADMIN = 'Admin',
    BAT = 'Bat',
    BOT = 'Bot',
    SUPPORTER = 'Supporter'
}

export type UserMedalResponse = {
    readonly id: number;
    readonly name: string;
    readonly description: string;
    readonly unlocked_at?: string | null;
};

export type UserMetadataResponse = {
    playstyle: Array<UserPlaystyle>;
    location: string;
    interest: string;
    occupation: string;
    telegram: string;
    twitch: string;
    twitter: string;
    discord: string;
    website: string;
};

export enum UserPlaystyle {
    NONE = 'None',
    MOUSE = 'Mouse',
    KEYBOARD = 'Keyboard',
    TABLET = 'Tablet',
    TOUCH_SCREEN = 'TouchScreen'
}

export type UserRelationsCountersResponse = {
    followers: number;
    following: number;
};

export type UserResponse = {
    user_id: number;
    username: string;
    description?: string | null;
    country_code: string;
    register_date: string;
    avatar_url: string;
    banner_url: string;
    last_online_time: string;
    restricted: boolean;
    silenced_until?: string | null;
    default_gamemode: GameMode;
    badges: Array<UserBadge>;
    user_status: string;
};

export type UserStatsResponse = {
    user_id: number;
    gamemode: GameMode;
    accuracy: number;
    total_score: number;
    ranked_score: number;
    play_count: number;
    pp: number;
    rank: number;
    country_rank: number;
    max_combo: number;
    play_time: number;
    total_hits: number;
    best_global_rank: number;
    best_global_rank_date: string;
    best_country_rank: number;
    best_country_rank_date: string;
};

export type UserWithStats = {
    user: UserResponse;
    stats: UserStatsResponse;
};

export type UserWithStatsResponse = {
    user: UserResponse;
    stats?: UserStatsResponse;
};

export type UsernameChangeRequest = {
    new_username: string;
};

export type PostAuthTokenData = {
    body?: TokenRequest;
    path?: never;
    query?: never;
    url: '/auth/token';
};

export type PostAuthTokenErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
};

export type PostAuthTokenError = PostAuthTokenErrors[keyof PostAuthTokenErrors];

export type PostAuthTokenResponses = {
    /**
     * OK
     */
    200: TokenResponse;
};

export type PostAuthTokenResponse = PostAuthTokenResponses[keyof PostAuthTokenResponses];

export type PostAuthRefreshData = {
    body?: RefreshTokenRequest;
    path?: never;
    query?: never;
    url: '/auth/refresh';
};

export type PostAuthRefreshErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
};

export type PostAuthRefreshError = PostAuthRefreshErrors[keyof PostAuthRefreshErrors];

export type PostAuthRefreshResponses = {
    /**
     * OK
     */
    200: RefreshTokenResponse;
};

export type PostAuthRefreshResponse = PostAuthRefreshResponses[keyof PostAuthRefreshResponses];

export type PostAuthRegisterData = {
    body?: RegisterRequest;
    path?: never;
    query?: never;
    url: '/auth/register';
};

export type PostAuthRegisterErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
};

export type PostAuthRegisterError = PostAuthRegisterErrors[keyof PostAuthRegisterErrors];

export type PostAuthRegisterResponses = {
    /**
     * OK
     */
    200: TokenResponse;
};

export type PostAuthRegisterResponse = PostAuthRegisterResponses[keyof PostAuthRegisterResponses];

export type GetPingData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/ping';
};

export type GetPingErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
};

export type GetPingError = GetPingErrors[keyof GetPingErrors];

export type GetPingResponses = {
    /**
     * OK
     */
    200: string;
};

export type GetPingResponse = GetPingResponses[keyof GetPingResponses];

export type GetLimitsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/limits';
};

export type GetLimitsErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
};

export type GetLimitsError = GetLimitsErrors[keyof GetLimitsErrors];

export type GetLimitsResponses = {
    /**
     * OK
     */
    200: LimitsResponse;
};

export type GetLimitsResponse = GetLimitsResponses[keyof GetLimitsResponses];

export type GetStatusData = {
    body?: never;
    path?: never;
    query?: {
        detailed?: boolean;
        includeRecentUsers?: boolean;
    };
    url: '/status';
};

export type GetStatusErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
};

export type GetStatusError = GetStatusErrors[keyof GetStatusErrors];

export type GetStatusResponses = {
    /**
     * OK
     */
    200: StatusResponse;
};

export type GetStatusResponse = GetStatusResponses[keyof GetStatusResponses];

export type GetBeatmapByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/beatmap/{id}';
};

export type GetBeatmapByIdErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetBeatmapByIdError = GetBeatmapByIdErrors[keyof GetBeatmapByIdErrors];

export type GetBeatmapByIdResponses = {
    /**
     * OK
     */
    200: BeatmapResponse;
};

export type GetBeatmapByIdResponse = GetBeatmapByIdResponses[keyof GetBeatmapByIdResponses];

export type GetBeatmapsetByBeatmapSetByIdData = {
    body?: never;
    path: {
        id: number;
        beatmapSet: string;
    };
    query?: never;
    url: '/beatmapset/{beatmapSet}/{id}';
};

export type GetBeatmapsetByBeatmapSetByIdErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetBeatmapsetByBeatmapSetByIdError = GetBeatmapsetByBeatmapSetByIdErrors[keyof GetBeatmapsetByBeatmapSetByIdErrors];

export type GetBeatmapsetByBeatmapSetByIdResponses = {
    /**
     * OK
     */
    200: BeatmapResponse;
};

export type GetBeatmapsetByBeatmapSetByIdResponse = GetBeatmapsetByBeatmapSetByIdResponses[keyof GetBeatmapsetByBeatmapSetByIdResponses];

export type GetBeatmapByIdPpData = {
    body?: never;
    path: {
        id: number;
    };
    query?: {
        mods?: Array<Mods>;
        mode?: GameMode;
        combo?: number;
        misses?: number;
        accuracy?: number;
    };
    url: '/beatmap/{id}/pp';
};

export type GetBeatmapByIdPpErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetBeatmapByIdPpError = GetBeatmapByIdPpErrors[keyof GetBeatmapByIdPpErrors];

export type GetBeatmapByIdPpResponses = {
    /**
     * OK
     */
    200: PerformanceAttributes;
};

export type GetBeatmapByIdPpResponse = GetBeatmapByIdPpResponses[keyof GetBeatmapByIdPpResponses];

export type GetBeatmapsetByBeatmapSetByIdPpData = {
    body?: never;
    path: {
        id: number;
        beatmapSet: string;
    };
    query?: {
        mods?: Array<Mods>;
        mode?: GameMode;
        combo?: number;
        misses?: number;
        accuracy?: number;
    };
    url: '/beatmapset/{beatmapSet}/{id}/pp';
};

export type GetBeatmapsetByBeatmapSetByIdPpErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetBeatmapsetByBeatmapSetByIdPpError = GetBeatmapsetByBeatmapSetByIdPpErrors[keyof GetBeatmapsetByBeatmapSetByIdPpErrors];

export type GetBeatmapsetByBeatmapSetByIdPpResponses = {
    /**
     * OK
     */
    200: PerformanceAttributes;
};

export type GetBeatmapsetByBeatmapSetByIdPpResponse = GetBeatmapsetByBeatmapSetByIdPpResponses[keyof GetBeatmapsetByBeatmapSetByIdPpResponses];

export type GetBeatmapByIdLeaderboardData = {
    body?: never;
    path: {
        id: number;
    };
    query?: {
        mode?: GameMode;
        mods?: Array<Mods>;
        limit?: number;
    };
    url: '/beatmap/{id}/leaderboard';
};

export type GetBeatmapByIdLeaderboardErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetBeatmapByIdLeaderboardError = GetBeatmapByIdLeaderboardErrors[keyof GetBeatmapByIdLeaderboardErrors];

export type GetBeatmapByIdLeaderboardResponses = {
    /**
     * OK
     */
    200: ScoresResponse;
};

export type GetBeatmapByIdLeaderboardResponse = GetBeatmapByIdLeaderboardResponses[keyof GetBeatmapByIdLeaderboardResponses];

export type GetBeatmapsetByBeatmapSetByIdLeaderboardData = {
    body?: never;
    path: {
        id: number;
        beatmapSet: string;
    };
    query?: {
        mode?: GameMode;
        mods?: Array<Mods>;
        limit?: number;
    };
    url: '/beatmapset/{beatmapSet}/{id}/leaderboard';
};

export type GetBeatmapsetByBeatmapSetByIdLeaderboardErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetBeatmapsetByBeatmapSetByIdLeaderboardError = GetBeatmapsetByBeatmapSetByIdLeaderboardErrors[keyof GetBeatmapsetByBeatmapSetByIdLeaderboardErrors];

export type GetBeatmapsetByBeatmapSetByIdLeaderboardResponses = {
    /**
     * OK
     */
    200: ScoresResponse;
};

export type GetBeatmapsetByBeatmapSetByIdLeaderboardResponse = GetBeatmapsetByBeatmapSetByIdLeaderboardResponses[keyof GetBeatmapsetByBeatmapSetByIdLeaderboardResponses];

export type GetBeatmapsetByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/beatmapset/{id}';
};

export type GetBeatmapsetByIdErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetBeatmapsetByIdError = GetBeatmapsetByIdErrors[keyof GetBeatmapsetByIdErrors];

export type GetBeatmapsetByIdResponses = {
    /**
     * OK
     */
    200: BeatmapSetResponse;
};

export type GetBeatmapsetByIdResponse = GetBeatmapsetByIdResponses[keyof GetBeatmapsetByIdResponses];

export type GetBeatmapsetByIdHypeData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/beatmapset/{id}/hype';
};

export type GetBeatmapsetByIdHypeErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetBeatmapsetByIdHypeError = GetBeatmapsetByIdHypeErrors[keyof GetBeatmapsetByIdHypeErrors];

export type GetBeatmapsetByIdHypeResponses = {
    /**
     * OK
     */
    200: BeatmapSetHypeCountResponse;
};

export type GetBeatmapsetByIdHypeResponse = GetBeatmapsetByIdHypeResponses[keyof GetBeatmapsetByIdHypeResponses];

export type PostBeatmapsetByIdHypeData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/beatmapset/{id}/hype';
};

export type PostBeatmapsetByIdHypeErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type PostBeatmapsetByIdHypeError = PostBeatmapsetByIdHypeErrors[keyof PostBeatmapsetByIdHypeErrors];

export type PostBeatmapsetByIdHypeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetBeatmapsetGetHypedSetsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        page?: number;
    };
    url: '/beatmapset/get-hyped-sets';
};

export type GetBeatmapsetGetHypedSetsErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetBeatmapsetGetHypedSetsError = GetBeatmapsetGetHypedSetsErrors[keyof GetBeatmapsetGetHypedSetsErrors];

export type GetBeatmapsetGetHypedSetsResponses = {
    /**
     * OK
     */
    200: HypedBeatmapSetsResponse;
};

export type GetBeatmapsetGetHypedSetsResponse = GetBeatmapsetGetHypedSetsResponses[keyof GetBeatmapsetGetHypedSetsResponses];

export type GetBeatmapsetByIdFavouritedData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/beatmapset/{id}/favourited';
};

export type GetBeatmapsetByIdFavouritedErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type GetBeatmapsetByIdFavouritedError = GetBeatmapsetByIdFavouritedErrors[keyof GetBeatmapsetByIdFavouritedErrors];

export type GetBeatmapsetByIdFavouritedResponses = {
    /**
     * OK
     */
    200: FavouritedResponse;
};

export type GetBeatmapsetByIdFavouritedResponse = GetBeatmapsetByIdFavouritedResponses[keyof GetBeatmapsetByIdFavouritedResponses];

export type PostBeatmapsetByIdFavouritedData = {
    body?: EditBeatmapsetFavouriteStatusRequest;
    path: {
        id: number;
    };
    query?: never;
    url: '/beatmapset/{id}/favourited';
};

export type PostBeatmapsetByIdFavouritedErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type PostBeatmapsetByIdFavouritedError = PostBeatmapsetByIdFavouritedErrors[keyof PostBeatmapsetByIdFavouritedErrors];

export type PostBeatmapsetByIdFavouritedResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostBeatmapUpdateCustomStatusData = {
    body?: UpdateBeatmapsCustomStatusRequest;
    path?: never;
    query?: never;
    url: '/beatmap/update-custom-status';
};

export type PostBeatmapUpdateCustomStatusErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type PostBeatmapUpdateCustomStatusError = PostBeatmapUpdateCustomStatusErrors[keyof PostBeatmapUpdateCustomStatusErrors];

export type PostBeatmapUpdateCustomStatusResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetBeatmapsetSearchData = {
    body?: never;
    path?: never;
    query?: {
        query?: string;
        status?: Array<BeatmapStatusWeb>;
        mode?: GameMode;
        limit?: number;
        page?: number;
    };
    url: '/beatmapset/search';
};

export type GetBeatmapsetSearchErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetBeatmapsetSearchError = GetBeatmapsetSearchErrors[keyof GetBeatmapsetSearchErrors];

export type GetBeatmapsetSearchResponses = {
    /**
     * OK
     */
    200: BeatmapSetsResponse;
};

export type GetBeatmapsetSearchResponse = GetBeatmapsetSearchResponses[keyof GetBeatmapsetSearchResponses];

export type GetScoreByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/score/{id}';
};

export type GetScoreByIdErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetScoreByIdError = GetScoreByIdErrors[keyof GetScoreByIdErrors];

export type GetScoreByIdResponses = {
    /**
     * OK
     */
    200: ScoreResponse;
};

export type GetScoreByIdResponse = GetScoreByIdResponses[keyof GetScoreByIdResponses];

export type GetScoreByIdReplayData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/score/{id}/replay';
};

export type GetScoreByIdReplayErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetScoreByIdReplayError = GetScoreByIdReplayErrors[keyof GetScoreByIdReplayErrors];

export type GetScoreByIdReplayResponses = {
    /**
     * OK
     */
    200: Blob | File;
};

export type GetScoreByIdReplayResponse = GetScoreByIdReplayResponses[keyof GetScoreByIdReplayResponses];

export type GetScoreTopData = {
    body?: never;
    path?: never;
    query?: {
        mode?: GameMode;
        limit?: number;
        page?: number;
    };
    url: '/score/top';
};

export type GetScoreTopErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
};

export type GetScoreTopError = GetScoreTopErrors[keyof GetScoreTopErrors];

export type GetScoreTopResponses = {
    /**
     * OK
     */
    200: ScoresResponse;
};

export type GetScoreTopResponse = GetScoreTopResponses[keyof GetScoreTopResponses];

export type GetUserByIdData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/user/{id}';
};

export type GetUserByIdErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetUserByIdError = GetUserByIdErrors[keyof GetUserByIdErrors];

export type GetUserByIdResponses = {
    /**
     * OK
     */
    200: UserResponse;
};

export type GetUserByIdResponse = GetUserByIdResponses[keyof GetUserByIdResponses];

export type GetUserByIdByModeData = {
    body?: never;
    path: {
        id: number;
        mode: GameMode;
    };
    query?: never;
    url: '/user/{id}/{mode}';
};

export type GetUserByIdByModeErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetUserByIdByModeError = GetUserByIdByModeErrors[keyof GetUserByIdByModeErrors];

export type GetUserByIdByModeResponses = {
    /**
     * OK
     */
    200: UserWithStatsResponse;
};

export type GetUserByIdByModeResponse = GetUserByIdByModeResponses[keyof GetUserByIdByModeResponses];

export type GetUserSelfData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/self';
};

export type GetUserSelfErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type GetUserSelfError = GetUserSelfErrors[keyof GetUserSelfErrors];

export type GetUserSelfResponses = {
    /**
     * OK
     */
    200: UserResponse;
};

export type GetUserSelfResponse = GetUserSelfResponses[keyof GetUserSelfResponses];

export type GetUserSelfByModeData = {
    body?: never;
    path: {
        mode: GameMode;
    };
    query?: never;
    url: '/user/self/{mode}';
};

export type GetUserSelfByModeErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type GetUserSelfByModeError = GetUserSelfByModeErrors[keyof GetUserSelfByModeErrors];

export type GetUserSelfByModeResponses = {
    /**
     * OK
     */
    200: UserWithStatsResponse;
};

export type GetUserSelfByModeResponse = GetUserSelfByModeResponses[keyof GetUserSelfByModeResponses];

export type PostUserEditDescriptionData = {
    body?: EditDescriptionRequest;
    path?: never;
    query?: never;
    url: '/user/edit/description';
};

export type PostUserEditDescriptionErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type PostUserEditDescriptionError = PostUserEditDescriptionErrors[keyof PostUserEditDescriptionErrors];

export type PostUserEditDescriptionResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostUserEditDefaultGamemodeData = {
    body?: EditDefaultGameModeRequest;
    path?: never;
    query?: never;
    url: '/user/edit/default-gamemode';
};

export type PostUserEditDefaultGamemodeErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type PostUserEditDefaultGamemodeError = PostUserEditDefaultGamemodeErrors[keyof PostUserEditDefaultGamemodeErrors];

export type PostUserEditDefaultGamemodeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetUserByUserIdGraphData = {
    body?: never;
    path: {
        userId: number;
    };
    query?: {
        mode?: GameMode;
    };
    url: '/user/{userId}/graph';
};

export type GetUserByUserIdGraphErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetUserByUserIdGraphError = GetUserByUserIdGraphErrors[keyof GetUserByUserIdGraphErrors];

export type GetUserByUserIdGraphResponses = {
    /**
     * OK
     */
    200: StatsSnapshotsResponse;
};

export type GetUserByUserIdGraphResponse = GetUserByUserIdGraphResponses[keyof GetUserByUserIdGraphResponses];

export type GetUserByIdScoresData = {
    body?: never;
    path: {
        id: number;
    };
    query?: {
        mode?: GameMode;
        type?: ScoreTableType;
        limit?: number;
        page?: number;
    };
    url: '/user/{id}/scores';
};

export type GetUserByIdScoresErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetUserByIdScoresError = GetUserByIdScoresErrors[keyof GetUserByIdScoresErrors];

export type GetUserByIdScoresResponses = {
    /**
     * OK
     */
    200: ScoresResponse;
};

export type GetUserByIdScoresResponse = GetUserByIdScoresResponses[keyof GetUserByIdScoresResponses];

export type GetUserByIdMostplayedData = {
    body?: never;
    path: {
        id: number;
    };
    query?: {
        mode?: GameMode;
        limit?: number;
        page?: number;
    };
    url: '/user/{id}/mostplayed';
};

export type GetUserByIdMostplayedErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetUserByIdMostplayedError = GetUserByIdMostplayedErrors[keyof GetUserByIdMostplayedErrors];

export type GetUserByIdMostplayedResponses = {
    /**
     * OK
     */
    200: MostPlayedResponse;
};

export type GetUserByIdMostplayedResponse = GetUserByIdMostplayedResponses[keyof GetUserByIdMostplayedResponses];

export type GetUserByIdFavouritesData = {
    body?: never;
    path: {
        id: number;
    };
    query?: {
        limit?: number;
        page?: number;
    };
    url: '/user/{id}/favourites';
};

export type GetUserByIdFavouritesErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetUserByIdFavouritesError = GetUserByIdFavouritesErrors[keyof GetUserByIdFavouritesErrors];

export type GetUserByIdFavouritesResponses = {
    /**
     * OK
     */
    200: BeatmapSetsResponse;
};

export type GetUserByIdFavouritesResponse = GetUserByIdFavouritesResponses[keyof GetUserByIdFavouritesResponses];

export type GetUserLeaderboardData = {
    body?: never;
    path?: never;
    query?: {
        mode?: GameMode;
        type?: LeaderboardSortType;
        limit?: number;
        page?: number;
    };
    url: '/user/leaderboard';
};

export type GetUserLeaderboardErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetUserLeaderboardError = GetUserLeaderboardErrors[keyof GetUserLeaderboardErrors];

export type GetUserLeaderboardResponses = {
    /**
     * OK
     */
    200: LeaderboardResponse;
};

export type GetUserLeaderboardResponse = GetUserLeaderboardResponses[keyof GetUserLeaderboardResponses];

export type GetUserSearchData = {
    body?: never;
    path?: never;
    query?: {
        query?: string;
        limit?: number;
        page?: number;
    };
    url: '/user/search';
};

export type GetUserSearchErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
};

export type GetUserSearchError = GetUserSearchErrors[keyof GetUserSearchErrors];

export type GetUserSearchResponses = {
    /**
     * OK
     */
    200: Array<UserResponse>;
};

export type GetUserSearchResponse = GetUserSearchResponses[keyof GetUserSearchResponses];

export type GetUserFriendsData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        page?: number;
    };
    url: '/user/friends';
};

export type GetUserFriendsErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type GetUserFriendsError = GetUserFriendsErrors[keyof GetUserFriendsErrors];

export type GetUserFriendsResponses = {
    /**
     * OK
     */
    200: FriendsResponse;
};

export type GetUserFriendsResponse = GetUserFriendsResponses[keyof GetUserFriendsResponses];

export type GetUserFollowersData = {
    body?: never;
    path?: never;
    query?: {
        limit?: number;
        page?: number;
    };
    url: '/user/followers';
};

export type GetUserFollowersErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type GetUserFollowersError = GetUserFollowersErrors[keyof GetUserFollowersErrors];

export type GetUserFollowersResponses = {
    /**
     * OK
     */
    200: FollowersResponse;
};

export type GetUserFollowersResponse = GetUserFollowersResponses[keyof GetUserFollowersResponses];

export type GetUserByIdFriendStatusData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/user/{id}/friend/status';
};

export type GetUserByIdFriendStatusErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetUserByIdFriendStatusError = GetUserByIdFriendStatusErrors[keyof GetUserByIdFriendStatusErrors];

export type GetUserByIdFriendStatusResponses = {
    /**
     * OK
     */
    200: FriendStatusResponse;
};

export type GetUserByIdFriendStatusResponse = GetUserByIdFriendStatusResponses[keyof GetUserByIdFriendStatusResponses];

export type PostUserByIdFriendStatusData = {
    body?: EditFriendshipStatusRequest;
    path: {
        id: number;
    };
    query?: never;
    url: '/user/{id}/friend/status';
};

export type PostUserByIdFriendStatusErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type PostUserByIdFriendStatusError = PostUserByIdFriendStatusErrors[keyof PostUserByIdFriendStatusErrors];

export type PostUserByIdFriendStatusResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type GetUserInventoryItemData = {
    body?: never;
    path?: never;
    query?: {
        type?: ItemType;
    };
    url: '/user/inventory/item';
};

export type GetUserInventoryItemErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetUserInventoryItemError = GetUserInventoryItemErrors[keyof GetUserInventoryItemErrors];

export type GetUserInventoryItemResponses = {
    /**
     * OK
     */
    200: InventoryItemResponse;
};

export type GetUserInventoryItemResponse = GetUserInventoryItemResponses[keyof GetUserInventoryItemResponses];

export type GetUserByIdFriendsCountData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/user/{id}/friends/count';
};

export type GetUserByIdFriendsCountErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetUserByIdFriendsCountError = GetUserByIdFriendsCountErrors[keyof GetUserByIdFriendsCountErrors];

export type GetUserByIdFriendsCountResponses = {
    /**
     * OK
     */
    200: UserRelationsCountersResponse;
};

export type GetUserByIdFriendsCountResponse = GetUserByIdFriendsCountResponses[keyof GetUserByIdFriendsCountResponses];

export type GetUserByIdMedalsData = {
    body?: never;
    path: {
        id: number;
    };
    query?: {
        mode?: GameMode;
    };
    url: '/user/{id}/medals';
};

export type GetUserByIdMedalsErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
};

export type GetUserByIdMedalsError = GetUserByIdMedalsErrors[keyof GetUserByIdMedalsErrors];

export type GetUserByIdMedalsResponses = {
    /**
     * OK
     */
    200: MedalsResponse;
};

export type GetUserByIdMedalsResponse = GetUserByIdMedalsResponses[keyof GetUserByIdMedalsResponses];

export type GetUserByIdGradesData = {
    body?: never;
    path: {
        id: number;
    };
    query?: {
        mode?: GameMode;
    };
    url: '/user/{id}/grades';
};

export type GetUserByIdGradesErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetUserByIdGradesError = GetUserByIdGradesErrors[keyof GetUserByIdGradesErrors];

export type GetUserByIdGradesResponses = {
    /**
     * OK
     */
    200: GradesResponse;
};

export type GetUserByIdGradesResponse = GetUserByIdGradesResponses[keyof GetUserByIdGradesResponses];

export type GetUserByIdMetadataData = {
    body?: never;
    path: {
        id: number;
    };
    query?: never;
    url: '/user/{id}/metadata';
};

export type GetUserByIdMetadataErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type GetUserByIdMetadataError = GetUserByIdMetadataErrors[keyof GetUserByIdMetadataErrors];

export type GetUserByIdMetadataResponses = {
    /**
     * OK
     */
    200: UserMetadataResponse;
};

export type GetUserByIdMetadataResponse = GetUserByIdMetadataResponses[keyof GetUserByIdMetadataResponses];

export type PostUserEditMetadataData = {
    body?: EditUserMetadataRequest;
    path?: never;
    query?: never;
    url: '/user/edit/metadata';
};

export type PostUserEditMetadataErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Not Found
     */
    404: ErrorResponse;
};

export type PostUserEditMetadataError = PostUserEditMetadataErrors[keyof PostUserEditMetadataErrors];

export type PostUserEditMetadataResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostUserUploadAvatarData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/upload/avatar';
};

export type PostUserUploadAvatarErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type PostUserUploadAvatarError = PostUserUploadAvatarErrors[keyof PostUserUploadAvatarErrors];

export type PostUserUploadAvatarResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostUserUploadBannerData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/upload/banner';
};

export type PostUserUploadBannerErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type PostUserUploadBannerError = PostUserUploadBannerErrors[keyof PostUserUploadBannerErrors];

export type PostUserUploadBannerResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostUserPasswordChangeData = {
    body?: ChangePasswordRequest;
    path?: never;
    query?: never;
    url: '/user/password/change';
};

export type PostUserPasswordChangeErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type PostUserPasswordChangeError = PostUserPasswordChangeErrors[keyof PostUserPasswordChangeErrors];

export type PostUserPasswordChangeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type PostUserUsernameChangeData = {
    body?: UsernameChangeRequest;
    path?: never;
    query?: never;
    url: '/user/username/change';
};

export type PostUserUsernameChangeErrors = {
    /**
     * Bad Request
     */
    400: ErrorResponse;
    /**
     * Unauthorized
     */
    401: ErrorResponse;
};

export type PostUserUsernameChangeError = PostUserUsernameChangeErrors[keyof PostUserUsernameChangeErrors];

export type PostUserUsernameChangeResponses = {
    /**
     * OK
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'https://api.sunrise.local' | (string & {});
};